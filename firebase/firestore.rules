rules_version = '2';

function printDebug() {
  return debug(request) || debug(resource) || true;
}

function isAuthenticated() {
  return request.auth != null;
}

function isMine() {
  return get(resource.data.owner).data.uid == request.auth.uid
}

function isPublic() {
  return isNotDeleted() && resource.data.status == 'published' && resource.data.isPublic == true
}

function isPublished() {
  return isNotDeleted() && resource.data.status == 'published'
}

function isNotDeleted() {
  return resource.data.isDeleted != true
}

function isPublicOrMine() {
  return isMine() || isPublic()
}

service cloud.firestore {
  match /databases/{database}/documents {
    match /timelines/{document=**} {
      allow read;
      allow write: if isAuthenticated();
    }
    match /posts/{postId} {
      allow read: if isPublicOrMine();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated();
    }
    match /items/{itemId} {
      allow read;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated();
    }
    match /users/{userId} {
      allow read;
      allow write: if isAuthenticated();
    }
    match /entities/{entity} {
      allow read;
      allow write: if isAuthenticated();
    }
    match /comments/{commentId} {
      allow read: if isPublished();
      allow write: if isAuthenticated();
    }
    match /activities/{document=**} {
      allow read;
      allow write: if isAuthenticated();
    }
    match /notifications/{notificationId} {
      allow read;
      allow write: if isAuthenticated();
      match /targets/{document=**} {
        allow read;
      }
    }
    match /secrets/{secretId} {
      allow read: if isMine();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated();
    }
    match /{document=**} {
      allow read: if false
      allow write: if false
    }
  }
}